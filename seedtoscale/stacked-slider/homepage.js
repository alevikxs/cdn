const cardListClass=".card-list",cardClass=".card-item",nextButtonClass=".next",prevButtonClass=".prev",prependList=function(s){let e=s.find(cardClass),t=s.find(cardClass).length-1;if(e.hasClass("activeNow")){let a=e.slice(t).addClass("transformPrev");s.find(cardListClass).prepend(a)}},appendToList=function(s){let e=s.find(cardClass);if(e.hasClass("activeNow")){let t=e.slice(0,1).removeClass("transformThis activeNow");s.find(cardListClass).append(t)}};function goNext(s){s.find(cardClass).first().removeClass("transformPrev").addClass("transformThis").next().addClass("activeNow"),setTimeout(function(){appendToList(s),stackCards(s)},200)}function goPrev(s){s.find(cardClass).removeClass("transformPrev").removeClass("activeNow").last().addClass("activeNow"),setTimeout(function(){prependList(s),stackCards(s)},150)}function touchGestures(s){let e=s.find(cardClass),t=0,a=0;e.bind("touchstart",s=>{t=s.changedTouches[0].screenX}),e.bind("touchend",e=>{(a=e.changedTouches[0].screenX)<t&&goNext(s),a>t&&goPrev(s)})}const stackCards=s=>{let e=s.find(cardClass);for(let t=0;t<e.length;t++)e[t].style.setProperty("--top-multiplier",t+5),e[t].style.zIndex=e.length-t,e[t].style.setProperty("--scale-multiplier",1-t/40)};function setupSlider(s){touchGestures(s),s.find(".next").click(function(){goNext(s)}),s.find(".prev").click(function(){goPrev(s)}),stackCards(s)}setupSlider($("#container1")),setupSlider($("#container2"));
